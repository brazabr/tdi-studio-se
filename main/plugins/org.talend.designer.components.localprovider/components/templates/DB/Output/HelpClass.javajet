<%@ include file="../../Log4j/Log4jDBConnUtil.javajet"%>
<%
	//this util class use by connection component
	class DefaultDBOutputUtil {

		protected String cid ;
		protected String dbmsId;
		protected String dbproperties ;
		protected String dbhost;
		protected String dbport;
		protected String dbname;
		protected String dbschema;
		protected String dbuser;
		protected String dbpwd ;
		protected String useExistingConn;
		protected String table;
		protected String dbVersion;
		protected String dataAction;
		protected String tableAction;
		protected List<Map<String, String>> addCols;
		protected boolean useFieldOptions;
		protected List<Map<String, String>> fieldOptions;
		protected boolean useBatchSize;
		protected String batchSize;
		protected String commitEvery;
		protected String dieOnError;
		protected String rejectConnName;
		protected boolean isEnableDebug;
		protected boolean executeBatch;
		protected Map<String, String> hintsValues;
		protected boolean useHintOptions;
		protected boolean useStatement;
		protected Manager manager;
		protected DefaultLog4jCodeGenerateUtil log4jCodeGenerateUtil;
		protected boolean isSharedStatement = false;

		public void beforeComponentProcess(INode node){
			cid = node.getUniqueName();
			log4jCodeGenerateUtil = new DefaultLog4jCodeGenerateUtil(node);
			useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
			dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
			dbhost = ElementParameterParser.getValue(node, "__HOST__");
			dbport = ElementParameterParser.getValue(node, "__PORT__");
			dbname = ElementParameterParser.getValue(node, "__DBNAME__");
			dbuser = ElementParameterParser.getValue(node, "__USER__");

	 		table = ElementParameterParser.getValue(node,"__TABLE__");
	 		dbschema = ElementParameterParser.getValue(node,"__SCHEMA_DB__");
	 		dbVersion =  ElementParameterParser.getValue(node, "__DB_VERSION__");
	 		dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	 		dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
	 		tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
	 		useBatchSize = ("true").equals(ElementParameterParser.getValue(node,"__USE_BATCH_SIZE__"));
			batchSize=ElementParameterParser.getValue(node,"__BATCH_SIZE__");
	 		addCols = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__" );
	 		useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));
	 		fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");
	 		commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
	 		dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	 		isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
			List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
			if(rejectConns != null && rejectConns.size() > 0) {
				IConnection rejectConn = rejectConns.get(0);
				rejectConnName = rejectConn.getName();
			}
			executeBatch = useBatchSize && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) && !("").equals(batchSize)&&!("0").equals(batchSize);
			useStatement = ("true").equals(ElementParameterParser.getValue(node,"__USE_STATEMENT__"));//for DBOutput
		}

		public void afterUseExistConnection(INode node) {
			log4jCodeGenerateUtil.useExistConnection(node);
		}

		public String getDirverClassName(INode node){
			return "";
		}

		public void setURL(INode node) {
		}
		public void setIsSharedStatement(boolean isSharedStatement){
			this.isSharedStatement=isSharedStatement;
		}

		public void createConnection(INode node) {
			this.createConnection(node, true);
		}

		public void classForName(INode node){
		%>
			String driverClass_<%=cid%> = "<%=this.getDirverClassName(node) %>";
			java.lang.Class.forName(driverClass_<%=cid%>);
		<%
		}

		public void defineConnectionParameter(INode node){
		}

		public void newConnection(){
		%>
			conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>,dbUser_<%=cid%>,dbPwd_<%=cid%>);
		<%
		}

		public void createConnection(INode node, boolean needUserAndPassword) {
			defineConnectionParameter(node);
	 		if(("true").equals(useExistingConn)) {
				String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
				String conn = "conn_" + connection;
				%>
				conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
			<%	
				INode connectionNode = null; 
				for (INode processNode : node.getProcess().getGeneratingNodes()) { 
					if(connection.equals(processNode.getUniqueName())) { 
						connectionNode = processNode; 
						break; 
					} 
				} 
				boolean specify_alias = "true".equals(ElementParameterParser.getValue(connectionNode, "__SPECIFY_DATASOURCE_ALIAS__"));
				if(specify_alias){ 
					String alias = ElementParameterParser.getValue(connectionNode, "__DATASOURCE_ALIAS__"); 
					String autoCommit = "true".equals(ElementParameterParser.getValue(connectionNode, "__AUTO_COMMIT__"))?"true":"false";
				%> 
					if (null == conn_<%=cid%>) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_<%=cid%> = (java.util.Map<String, routines.system.TalendDataSource>) globalMap.get(KEY_DB_DATASOURCES); 
						conn_<%=cid%> = dataSources_<%=cid%>.get(<%=(null != alias && !("".equals(alias)))?alias:"\"\""%>).getConnection();
						if (conn_<%=cid%> != null) { 
							conn_<%=cid%>.setAutoCommit(<%=autoCommit%>);
						}
					}
				<%
				}
				this.afterUseExistConnection(node);
			} else {// "Not use exist connection"
	 			boolean specify_alias = "true".equals(ElementParameterParser.getValue(node, "__SPECIFY_DATASOURCE_ALIAS__"));
		 		if(specify_alias){
				%>
					java.util.Map<String, routines.system.TalendDataSource> dataSources_<%=cid%> = (java.util.Map<String, routines.system.TalendDataSource>) globalMap.get(KEY_DB_DATASOURCES);
					if (null != dataSources_<%=cid%>) {
						<%
						String alias = ElementParameterParser.getValue(node, "__DATASOURCE_ALIAS__");
						%>
						conn_<%=cid%> = dataSources_<%=cid%>.get(<%=(null != alias && !("".equals(alias)))?alias:"\"\""%>).getConnection();
					} else {
				<%
				}
				this.classForName(node);
				this.setURL(node);
				//log4jCodeGenerateUtil.debugConnectionParams(node);
				if(needUserAndPassword) {
				%>
					String dbUser_<%=cid %> = <%=dbuser%>;
	        
            		<%
            		String passwordFieldName = "__PASS__";
            		%>
            		
            		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
            	   	
                    String dbPwd_<%=cid %> = decryptedPassword_<%=cid%>;
	        
					<%
					log4jCodeGenerateUtil.connect_begin();
					newConnection();
				} else {
					log4jCodeGenerateUtil.connect_begin_noUser();
				%>
					conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>);
				<%
				}
				log4jCodeGenerateUtil.connect_end();
				if(specify_alias){
				%>
				}
				<%
				}
				%>
				resourceMap.put("conn_<%=cid%>", conn_<%=cid%>);
			<%
			}//end "Not use exist connection"
		}

		public void setCommit(INode node){
			if(!("true").equals(useExistingConn)) {
				boolean useTransaction = !("false").equals(ElementParameterParser.getValue(node,"__USE_TRANSACTION__"));
				boolean useCommitControl = !("false").equals(ElementParameterParser.getValue(node,"__USE_COMMIT_CONTROL__"));
				if(!("").equals(commitEvery) && !("0").equals(commitEvery) && useTransaction && useCommitControl) {
				%>
					if(conn_<%=cid%>.getAutoCommit()) {
						<%log4jCodeGenerateUtil.autoCommit(node,false);%>
					}		
					int commitEvery_<%=cid%> = <%=commitEvery%>;
					int commitCounter_<%=cid%> = 0;
				<%
				}
			}
		}

		public void defineSchema(INode node,Manager manager){
		}
		public void defineSchemaTable(INode node,Manager manager,String schemaKey){
			if(("true").equals(useExistingConn)) {
				String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
				String schema = schemaKey + connection;
		%>
				String dbschema_<%=cid%> = (String)globalMap.get("<%=schema%>");
			<%
			}else{
			%>
				String dbschema_<%=cid%> = <%=dbschema%>;
			<%
			}
			addSchemaToTable(manager);
		}

		public void addSchemaToTable(Manager manager){
		%>
			if(dbschema_<%=cid%> != null && dbschema_<%=cid%>.trim().length() > 0) {
				tableName_<%=cid%> = dbschema_<%=cid%> + "<%=manager.getRProtectedChar()%>.<%=manager.getLProtectedChar()%>" + tableName_<%=cid%>;
			}
		<%
		}

		public void defineBatchSize(INode node){
			if (executeBatch) {
			%>
				int batchSize_<%=cid%> = <%=batchSize%>;
				int batchSizeCounter_<%=cid%>=0;
			<%
			}
		}
		
		public void prepareForTable(INode node){}

		public List<Column> createColumnList(INode node,Manager manager,List<IMetadataColumn> columnList){
			return manager.createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
		}

		public void prepareColumn(List<Column> stmtStructure){
		}

		public void defineOtherParameters(INode node){
		}
		public void end(INode node){}
		public Map<String, String> hint(INode node){
			return null;
		}
        protected void changeSQL(){
        }
		public void preparedStatInsert(INode node,Manager manager,StringBuilder insertColName,StringBuilder insertValueStmt,IMetadataColumn talendDynCol,boolean isDynamic){
			List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
			if(conns_dynamic!=null && conns_dynamic.size()>0){
				IConnection conn = conns_dynamic.get(0);
				if(!("".equals(insertColName.toString()))) {
				%>
					String insert_<%=cid%> = "INSERT INTO <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>,"<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
				<%
				} else {
				%>
					String insert_<%=cid%> = "INSERT INTO <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
				<%
				}
			}
			changeSQL();
			%>
			<%@ include file="../../_hintInsert.javajet" %>	    
			<%
			if(!isSharedStatement || !(cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){
			%>
				pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
			<%
			}
			//to fixed: bug8422
			if(isSharedStatement && (cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){
			%>
				pstmt_<%=cid %> = null;         
				// [%connection%][psmt][tableName]
				String keyPsmt_<%=cid %> = conn_<%=cid%> + "[psmt]" + "[" + <%=table%> + "]";
				if(GlobalResource.resourceMap.get(keyPsmt_<%=cid %>)== null){
					pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);		
					GlobalResource.resourceMap.put(keyPsmt_<%=cid %>, pstmt_<%=cid %>);
				}else{
					pstmt_<%=cid %> = (java.sql.PreparedStatement)GlobalResource.resourceMap.get(keyPsmt_<%=cid %>);				
				}
			<%
			}
		}

		public void insert(INode node,Manager manager,StringBuilder insertColName,StringBuilder insertValueStmt){
			Map<String, String> hintsValues = hint(node);
			boolean useHintOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_HINT_OPTIONS__"));
			%>
			String insert_<%=cid%> = "INSERT INTO <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
			<%@ include file="../../_hintInsert.javajet" %>
			<%
			if(!isSharedStatement || !(cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){
			%>
				<%
				if(useStatement){
				%>
					java.sql.Statement pstmt_<%=cid %> = conn_<%=cid%>.createStatement();
				<%
				}else{
				%>
					java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
			<%
				}
			}
			if(isSharedStatement && (cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){
			%>
				java.sql.PreparedStatement pstmt_<%=cid %> = null;
				// [%connection%][psmt][tableName]
				String keyPsmt_<%=cid %> = conn_<%=cid%> + "[psmt]" + "[" + <%=table%> + "]";
				pstmt_<%=cid %> = SharedDBPreparedStatement.getSharedPreparedStatement(conn_<%=cid%>,insert_<%=cid%>,keyPsmt_<%=cid%>);
			<%
			}
		}

		public List<Column> getColStruct(List<Column> stmtStructure){
			List<Column> colStruct = new ArrayList<Column>();
			for(Column colStmt : stmtStructure) {
				if(!colStmt.isReplaced() && !colStmt.isAddCol() && !colStmt.isDynamic()) {
					colStruct.add(colStmt);
				}
			}
			return colStruct;
		}

		public boolean showSavePoint(INode node){
			return false;
		}
		
		public void checkExist(Manager manager,String updateWhereStmt){
		%>
			String checkExist_<%=cid%> = "SELECT COUNT(1) FROM <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> WHERE <%=updateWhereStmt%>";
		<%
		}

		public void actionOnTable(INode node,List<Column> stmtStructure){}//for vertica create projection

		public void setDBVersion(INode node,Manager manager){}
		public void generateInsertSetStmt(INode node,Manager manager,String typeToGenerate, Column column, int index, String incomingConnName, String cid, int actionType) {
			generateSetStmt(manager,typeToGenerate, column, index, incomingConnName, cid,actionType);
		}

		public void generateSetStmt(Manager manager,String typeToGenerate, Column column, int index, String incomingConnName, String cid, int actionType) {
		%>
			<%=manager.generateSetStmt(typeToGenerate, column, index, incomingConnName, cid,actionType)%>
		<%
		}

		public void generateSetStmt(Manager manager,String typeToGenerate, Column column, int index, String incomingConnName, String cid, int actionType,String dynamic) {
		%>
			<%=manager.generateSetStmt(typeToGenerate, column, index, incomingConnName, cid,actionType,dynamic)%>
		<%
		}
		
		public boolean addBatch(){
			boolean addBatch = rejectConnName == null && useBatchSize;
			return addBatch;
		}

		public void prepareDataActionMore(INode node,Manager manager,StringBuilder insertColName,StringBuilder insertValueStmt,StringBuilder updateSetStmt,StringBuilder updateWhereStmt){}

		public void dataActionMore(INode node,List<Column> colStruct,Manager manager,String incomingConnName,List<IMetadataColumn> rejectColumnList,List<IMetadataColumn> columnList){}

		public void insertData(INode node,List<Column> colStruct,Manager manager,String incomingConnName,boolean isDynamic,int actionType,List<IMetadataColumn> rejectColumnList,List<IMetadataColumn> columnList,IMetadataColumn talendDynCol){
			int counter = 1;
			for(Column column : colStruct) {
				if(column.isInsertable()) {
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
					if(!useStatement){
						generateInsertSetStmt(node,manager,typeToGenerate, column, counter, incomingConnName, cid, actionType);
					}
					if(useStatement || isEnableDebug) {
						%>
						query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
						<%
					}
					counter++;
				}
			}
			if(isDynamic) {
				Column dynamicColumn = getColumn(talendDynCol);
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
    			if(useStatement || isEnableDebug) {
    			%>
					routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counter%>,insertSQLSplits_<%=cid%>);
                <%
    			}
				if("Dynamic".equals(typeToGenerate)) {
				%>
					DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, <%=counter-1%>, "<%=dbmsId%>");
				<%
				}
			}
			if(isEnableDebug) {
				%>
				globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
				<%
			}
			if (addBatch()) {
				log4jCodeGenerateUtil.defineDataOperationPrefix(node,"Adding");
				%>
				pstmt_<%=cid %>.addBatch();
				nb_line_<%=cid%>++;
				<%
				if (useBatchSize && !("").equals(batchSize) && !("0").equals(batchSize)) {
				%>
					batchSizeCounter_<%=cid%>++;
				<%
				}
			}else {
				log4jCodeGenerateUtil.defineDataOperationPrefix(node,"Inserting");
				%>
				try {
					nb_line_<%=cid%>++;
					<%if(useStatement){%>
						insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate(query_<%=cid%>.toString().trim());
					<%}else{%>
						insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
					<%}%>
				} catch(java.lang.Exception e_<%=cid%>) {
					whetherReject_<%=cid%> = true;
					<%
					if (("true").equals(dieOnError)) {
						log4jCodeGenerateUtil.logError(node,"fatal","e_"+cid);
						%>
						throw(e_<%=cid%>);
					<%
					} else {
						log4jCodeGenerateUtil.logError(node,"error","e_"+cid);
						if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
						%>
							<%=rejectConnName %> = new <%=rejectConnName %>Struct();
							<%
							for(IMetadataColumn column : columnList) {
							%>
								<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
							<%
							}
							%>
							rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
							<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e_<%=cid%>).getSQLState();
							<%=rejectConnName%>.errorMessage = e_<%=cid%>.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
						<%
						} else {
						%>
							System.err.print(e_<%=cid%>.getMessage());
						<%
						}
					}
					%>
				}
			<%
			}
		}

		public void executeBatch(INode node){
		}

		public void commitEvery(INode node){
			if(!("true").equals(useExistingConn)) {
				String useCommitControl = ElementParameterParser.getValue(node,"__USE_COMMIT_CONTROL__");
				if(!("false").equals(useCommitControl)) {
					if(!("").equals(commitEvery) && !("0").equals(commitEvery)) {
					%>
						commitCounter_<%=cid%>++;
						if(commitEvery_<%=cid%> <= commitCounter_<%=cid%>) {
							<%log4jCodeGenerateUtil.commit(node);%>
							commitCounter_<%=cid%>=0;
						}
					<%
					}
				}
			}
		}

	}//end DefaultDBInputUtil class

	DefaultDBOutputUtil dbOutputBeginUtil = new DefaultDBOutputUtil();
%>