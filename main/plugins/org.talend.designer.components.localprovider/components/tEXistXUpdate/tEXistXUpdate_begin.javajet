<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
	"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String uri = ElementParameterParser.getValue(node, "__URI__");
	String driver = ElementParameterParser.getValue(node, "__DRIVER__");
	String collection = ElementParameterParser.getValue(node, "__COLLECTION__");
	String user = ElementParameterParser.getValue(node, "__USERNAME__");
	String updateFile = ElementParameterParser.getValue(node, "__UPDATEFILE__");
	String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
	String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");

	dbLog = new DBLogUtil(node);

	if(("true").equals(useExistingConn)){
		String col= "col_" + connection;
%>
		org.xmldb.api.base.Collection col_<%=cid%> = (org.xmldb.api.base.Collection)globalMap.get("<%=col%>");
<%
	}else{
%>
		Class cl_<%=cid%> = Class.forName(<%=driver%>);
		<%dbLog.conn().logJDBCDriver(driver);%>
	    org.xmldb.api.base.Database database_<%=cid%> = (org.xmldb.api.base.Database) cl_<%=cid%>.newInstance();
	    database_<%=cid%>.setProperty("create-database", "true");
	    org.xmldb.api.DatabaseManager.registerDatabase(database_<%=cid%>);
	        
		<%
		String passwordFieldName = "__PASSWORD__";
		%>
		
		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
	   	<%dbLog.conn().connTry(uri,user);%>
	    org.xmldb.api.base.Collection col_<%=cid%> = org.xmldb.api.DatabaseManager.getCollection(<%=uri%> + <%=collection%>,<%=user%>,decryptedPassword_<%=cid%>);
		<%dbLog.conn().connDone(uri);%>
<%
	}
%>
	org.xmldb.api.modules.XUpdateQueryService service_<%=cid%> = (org.xmldb.api.modules.XUpdateQueryService) col_<%=cid%>.getService("XUpdateQueryService", "1.0");
	java.io.File file_<%=cid%> = new java.io.File(<%=updateFile%>);
	java.io.BufferedReader br_<%=cid%> = new java.io.BufferedReader(new java.io.FileReader(file_<%=cid%>));
	char[] characters_<%=cid%> = new char[new Long(file_<%=cid%>.length()).intValue()];
	br_<%=cid%>.read(characters_<%=cid%>, 0, new Long(file_<%=cid%>.length()).intValue());
	br_<%=cid%>.close();
	String xUpdateModifications_<%=cid%> = new String(characters_<%=cid%>);
	service_<%=cid%>.update(xUpdateModifications_<%=cid%>);
